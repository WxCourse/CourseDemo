<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--配置自动扫描的包: 主要是为了把 Service 扫描到IOC容器之中-->
    <context:component-scan base-package="com.crowd.service" />

    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--装配数据源-->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--配置切面-->
    <aop:config>
        <!--
        以下execution里的表达式可以表示为下面的类里的方法:
        第一个 * 代表 修饰符与返回值 都是任意的
        第二个 * 代表 （com）包名是任意的
        连续的两个点 代表 任意的包层次
        第三个 * 代表任意的以 Service 结尾的方法
        第四个 * 代表任意的方法名
        括号内连续的点 代表 任意的参数
        public String com.crowd.service.AdminServiceImpl.saveAdmin(Admin)-->
        <!--考虑到后面整合 SpringSecurity ，避免把 UserDetailService 加入事务控制里面（报错），将切入点定位到 ServiceImpl-->
        <aop:pointcut id="txPoint" expression="execution( * *..*ServiceImpl.*(..))"/>

        <!--将切入点表达式与事务通知联系起来-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>

    <!-- 配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- 配置事务的属性-->
        <tx:attributes>
            <!-- 查询方法 : 配置只读操作，让数据库知道它是一个查询操作，能够进行一定的优化 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>

            <!-- 增删改方法 : 配置事务的传播行为，和回滚异常-->
            <!-- propagation :
                    REQUIRED: 默认值，表示当前方法必须工作在事务之中，
                    如果当前线程上没有已经开启的事务，则自己开启事务，如果已经开启了则使用已有的事务（一般不使用这个）
                    REQUIRED 顾虑: 用别人的事务也有可能被回滚
                    REQUIRES_NEW : 建议使用的值，表示当前方法必须工作在事务之中，
                    如果当前线程没有开启事务则自己开启一个新的，如果已经开启了，也在自己新开启的事务之中运行
                    REQUIRES_NEW 好处: 不会受其它事务的影响
            -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="bach*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!--rollback-for : 回滚的原因（Exception 编译和运行时都回滚）-->
        </tx:attributes>
    </tx:advice>


</beans>