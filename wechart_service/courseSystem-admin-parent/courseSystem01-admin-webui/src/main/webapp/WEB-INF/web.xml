<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 配置ContextLoaderListener -->
    <context-param>
        <!-- 将 SpringIOC 容器装载到 ContextLoaderListener-->
        <param-name>contextConfigLocation</param-name>
        <!--配置spring-persist-tx.xml 和 spring-persist-mybatis.xml-->
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 指定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制请求设置字符集 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 强制响应设置字符集 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <!-- 这个 Filer 执行顺序必须在其它的Filter 前面-->
    <!-- 原因如下:
            request.setCharacterEncoding()必须在request.getParam()之前
            response.setCharacterEncoding()必须在response.getWrite()之前 不然字符集设置不起作用
    -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!-- servlet 默认的生命周期之中，创建对象是在第一次请求的时候创建-->
        <!-- 而 DispatcherServlet 因为里面包含大量的框架初始化的工作，因此不适合在请求时创建-->
        <!-- DispatcherServlet 应该在 web 启动时创建对象，初始化框架-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <!--
            默认的配置方式一: 表示拦截所有请求
                <url-pattern>/*</url-pattern>
        -->
       <!--
            配置方式二: 配置请求扩展名
                优点一: xxx.css xxx.js xxx.png 等静态资源可以不用经过springmvc ，不需要经过特殊处理
                优点二: 可以实现伪静态的效果
        -->
        <url-pattern>*.html</url-pattern>

        <!-- 为什么要配置 .json 的扩展名呢？-->
        <!-- 如果一个ajax请求的扩展名是 html ，但服务器实际上返回的数据是json数据，二者就不兼容了 会出现406的错误-->
        <!-- 为了让 ajax 请求能够顺利拿到 JSON 格式的响应数据，我们另需要要配置json扩展名-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>


    <!--加入 SpringSecurity 控制权限的 Filter-->
    <!--<filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->


</web-app>